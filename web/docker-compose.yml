version: '3.8'

services:
  # Staging Redis
  redis_staging:
    image: redis:latest
    container_name: redis_staging
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_STAGING_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379" # Expose the staging Redis on the host (optional)
    command: ["redis-server", "--requirepass", "${REDIS_STAGING_PASSWORD}"]

  # Production Redis
  redis_prod:
    image: redis:latest
    container_name: redis_prod
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PROD_PASSWORD}
    ports:
      - "127.0.0.1:6380:6379" # Expose the production Redis on the host (optional)
    command: ["redis-server", "--requirepass", "${REDIS_PROD_PASSWORD}"]

  # Staging PostgreSQL
  postgres_staging:
    image: postgres:latest
    container_name: postgres_staging
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_STAGING_USER}
      - POSTGRES_PASSWORD=${POSTGRES_STAGING_PASSWORD}
      - POSTGRES_DB=${POSTGRES_STAGING_DB}
    ports:
      - "127.0.0.1:5432:5432" # Expose the staging PostgreSQL on the host (optional)
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data

  # Production PostgreSQL
  postgres_prod:
    image: postgres:latest
    container_name: postgres_prod
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_PROD_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PROD_PASSWORD}
      - POSTGRES_DB=${POSTGRES_PROD_DB}
    ports:
      - "127.0.0.1:5433:5432" # Expose the production PostgreSQL on the host (optional)
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: always
    network_mode: host # Use host network mode
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN}
    # Allow cloudflared to access all network interfaces
    cap_add:
      - NET_ADMIN

volumes:
  postgres_staging_data:
  postgres_prod_data: